import sys
from PySide6.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                           QHBoxLayout, QLabel, QPushButton, QLineEdit, 
                           QTableWidget, QTableWidgetItem, QFormLayout, QComboBox, 
                           QSpinBox, QTabWidget, QFileDialog, QMessageBox,
                           QDoubleSpinBox, QStackedWidget)
from PySide6.QtCore import Qt, QSize
from PySide6.QtGui import QFont, QIcon, QPixmap
from PySide6.QtCharts import QChart, QChartView, QLineSeries, QValueAxis, QDateTimeAxis
from PySide6.QtCore import Qt, QDateTime
from PySide6.QtGui import QPainter
from PySide6.QtCharts import QPieSeries, QBarSeries, QBarSet, QChart, QChartView
import datetime
import mysql.connector
import time
from database import connect_db

class StatisticsManagementTab(QWidget):
    def __init__(self):
        super().__init__()
        self.init_ui()
        
    def init_ui(self):
        layout = QVBoxLayout()
        
        title_layout = QHBoxLayout()
        title = QLabel("Th·ªëng k√™")
        title.setFont(QFont("Arial", 14, QFont.Bold))

        clear_icon = QPushButton()
        clear_icon.setIcon(QIcon("image/broom.png"))
        clear_icon.setFixedSize(32, 32)
        clear_icon.setStyleSheet("""
            QPushButton {
                border: none;
                background: transparent;
            }
            QPushButton:hover {
                background-color: #f0f0f0;
                border-radius: 5px;  
            }
        """)
        clear_icon.setToolTip("L√†m m·ªõi danh s√°ch")
        clear_icon.clicked.connect(self.update_chart)

        title_layout.addWidget(title)
        title_layout.addStretch()  # ƒê·∫©y icon v·ªÅ g√≥c ph·∫£i
        title_layout.addWidget(clear_icon)

        layout.addLayout(title_layout)
        
        # Ti√™u ƒë·ªÅ
        title = QLabel("Th·ªëng K√™ Doanh Thu")
        title.setFont(QFont("Arial", 14, QFont.ExtraBold))
        layout.addWidget(title)
        
        # B·ªô l·ªçc th·ªùi gian
        filter_layout = QHBoxLayout()
        filter_layout.addWidget(QLabel("Th·ªùi gian:"))
        self.time_filter = QComboBox()
        self.time_filter.addItems(["H√¥m nay", "Tu·∫ßn n√†y", "Th√°ng n√†y", "NƒÉm nay"])
        self.time_filter.currentIndexChanged.connect(self.update_chart)  # K·∫øt n·ªëi s·ª± ki·ªán thay ƒë·ªïi b·ªô l·ªçc
        filter_layout.addWidget(self.time_filter)
        filter_layout.addStretch()
        layout.addLayout(filter_layout)
        
        # C√°c widget th·ªëng k√™
        stats_layout = QHBoxLayout()
        
        # Doanh thu
        font = QFont("Arial", 20, QFont.Bold) 
        revenue_widget = QWidget()
        revenue_layout = QVBoxLayout()
        revenue_label = QLabel("üíµ Doanh Thu")
        revenue_label.setFont(font)
        self.revenue_amount = QLabel("0 VNƒê")
        self.revenue_amount.setFont(QFont("Arial", 16, QFont.ExtraBold))
        revenue_layout.addWidget(revenue_label)
        revenue_layout.addWidget(self.revenue_amount)
        revenue_widget.setLayout(revenue_layout)
        revenue_widget.setStyleSheet("background-color: #4F81BD; padding: 20px; border-radius: 10px;")
        
        # L·ª£i nhu·∫≠n
        profit_widget = QWidget()
        profit_layout = QVBoxLayout()
        profit_label = QLabel("üìà L·ª£i Nhu·∫≠n")
        profit_label.setFont(font)
        self.profit_amount = QLabel("0 VNƒê")
        self.profit_amount.setFont(QFont("Arial", 16, QFont.ExtraBold))
        profit_layout.addWidget(profit_label)
        profit_layout.addWidget(self.profit_amount)
        profit_widget.setLayout(profit_layout)
        profit_widget.setStyleSheet("background-color: #FF8C00; padding: 20px; border-radius: 10px;")
        
        # ƒê∆°n h√†ng
        orders_widget = QWidget()
        orders_layout = QVBoxLayout()
        orders_label = QLabel("üìù S·ªë ƒê∆°n H√†ng")
        orders_label.setFont(font)
        self.orders_amount = QLabel("0 ƒê∆°n")
        self.orders_amount.setFont(QFont("Arial", 16, QFont.ExtraBold))
        orders_layout.addWidget(orders_label)
        orders_layout.addWidget(self.orders_amount)
        orders_widget.setLayout(orders_layout)
        orders_widget.setStyleSheet("background-color: #FF4500; padding: 20px; border-radius: 10px;")
        
        stats_layout.addWidget(revenue_widget)
        stats_layout.addWidget(profit_widget)
        stats_layout.addWidget(orders_widget)
        
        layout.addLayout(stats_layout)
        
        # **Th√™m Bi·ªÉu ƒê·ªì Doanh Thu**
        self.chart = QChart()
        self.chart.setTitle("Bi·ªÉu ƒë·ªì doanh thu")
        self.chart.setAnimationOptions(QChart.SeriesAnimations)

        self.chart_view = QChartView(self.chart)
        self.chart_view.setRenderHint(QPainter.Antialiasing)  # S·ª≠a l·ªói Antialiasing
        layout.addWidget(self.chart_view)
        self.update_chart()

        self.setLayout(layout)
        self.update_chart()  # G·ªçi h√†m c·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì

    def fetch_statistics_data(self, filter_option):
        db = connect_db()
        cursor = db.cursor()

        today = datetime.date.today()
        month = today.month
        year = today.year

        revenue_data = []
        profit_data = []
        orders_data = []

        try:
            if filter_option == "H√¥m nay":
                query_revenue = """
                SELECT ngayDat, SUM(tongTien) 
                FROM donhang 
                WHERE ngayDat = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_revenue, (today,))
                revenue_data = cursor.fetchall()

                query_profit = """
                SELECT dh.ngayDat, SUM(ct.loiNhuan)
                FROM donhang dh
                JOIN chitiethoadon ct ON dh.maDH = ct.maDH
                WHERE dh.ngayDat = %s AND dh.trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY dh.ngayDat
                """
                cursor.execute(query_profit, (today,))
                profit_data = cursor.fetchall()

                query_orders = """
                SELECT ngayDat, COUNT(maDH) 
                FROM donhang 
                WHERE ngayDat = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_orders, (today,))
                orders_data = cursor.fetchall()

            elif filter_option == "Tu·∫ßn n√†y":
                start_week = today - datetime.timedelta(days=today.weekday())

                query_revenue = """
                SELECT ngayDat, SUM(tongTien) 
                FROM donhang 
                WHERE ngayDat BETWEEN %s AND %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_revenue, (start_week, today))
                revenue_data = cursor.fetchall()

                query_profit = """
                SELECT dh.ngayDat, SUM(ct.loiNhuan)
                FROM donhang dh
                JOIN chitiethoadon ct ON dh.maDH = ct.maDH
                WHERE dh.ngayDat BETWEEN %s AND %s AND dh.trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY dh.ngayDat
                """
                cursor.execute(query_profit, (start_week, today))
                profit_data = cursor.fetchall()

                query_orders = """
                SELECT ngayDat, COUNT(maDH) 
                FROM donhang 
                WHERE ngayDat BETWEEN %s AND %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_orders, (start_week, today))
                orders_data = cursor.fetchall()

            elif filter_option == "Th√°ng n√†y":
                query_revenue = """
                SELECT ngayDat, SUM(tongTien) 
                FROM donhang 
                WHERE MONTH(ngayDat) = %s AND YEAR(ngayDat) = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_revenue, (month, year))
                revenue_data = cursor.fetchall()

                query_profit = """
                SELECT dh.ngayDat, SUM(ct.loiNhuan)
                FROM donhang dh
                JOIN chitiethoadon ct ON dh.maDH = ct.maDH
                WHERE MONTH(dh.ngayDat) = %s AND YEAR(dh.ngayDat) = %s AND dh.trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY dh.ngayDat
                """
                cursor.execute(query_profit, (month, year))
                profit_data = cursor.fetchall()

                query_orders = """
                SELECT ngayDat, COUNT(maDH) 
                FROM donhang 
                WHERE MONTH(ngayDat) = %s AND YEAR(ngayDat) = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_orders, (month, year))
                orders_data = cursor.fetchall()

            elif filter_option == "NƒÉm nay":
                query_revenue = """
                SELECT ngayDat, SUM(tongTien) 
                FROM donhang 
                WHERE YEAR(ngayDat) = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_revenue, (year,))
                revenue_data = cursor.fetchall()

                query_profit = """
                SELECT dh.ngayDat, SUM(ct.loiNhuan)
                FROM donhang dh
                JOIN chitiethoadon ct ON dh.maDH = ct.maDH
                WHERE YEAR(dh.ngayDat) = %s AND dh.trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY dh.ngayDat
                """
                cursor.execute(query_profit, (year,))
                profit_data = cursor.fetchall()

                query_orders = """
                SELECT ngayDat, COUNT(maDH) 
                FROM donhang 
                WHERE YEAR(ngayDat) = %s AND trangThai = 'ƒê√£ thanh to√°n'
                GROUP BY ngayDat
                """
                cursor.execute(query_orders, (year,))
                orders_data = cursor.fetchall()

            # Debug ki·ªÉm tra d·ªØ li·ªáu
            print(f"üìä D·ªØ li·ªáu doanh thu ({filter_option}): {revenue_data}")
            print(f"üìà D·ªØ li·ªáu l·ª£i nhu·∫≠n ({filter_option}): {profit_data}")
            print(f"üìù D·ªØ li·ªáu s·ªë ƒë∆°n h√†ng ({filter_option}): {orders_data}")

        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói truy v·∫•n SQL: {e}")

        finally:
            db.close()

        return {
            "revenue": revenue_data if revenue_data else [(today, 0)],
            "profit": profit_data if profit_data else [(today, 0)],
            "orders": orders_data if orders_data else [(today, 0)]
        }

    def update_chart(self):
        filter_option = self.time_filter.currentText()
        data = self.fetch_statistics_data(filter_option)

        if not data:
            print("‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ hi·ªÉn th·ªã bi·ªÉu ƒë·ªì!")
            return

        # X√≥a to√†n b·ªô tr·ª•c tr∆∞·ªõc khi th√™m m·ªõi
        for axis in self.chart.axes():
            self.chart.removeAxis(axis)

        # X√≥a series c≈©
        self.chart.removeAllSeries()

        # T√≠nh t·ªïng doanh thu v√† l·ª£i nhu·∫≠n, ƒë·∫£m b·∫£o chuy·ªÉn ƒë·ªïi sang float
        total_revenue = float(sum(row[1] for row in data["revenue"])) if data["revenue"] else 0.0
        total_profit = float(sum(row[1] for row in data["profit"])) if data["profit"] else 0.0
        total_orders = sum(row[1] for row in data["orders"]) if data["orders"] else 0

        # C·∫≠p nh·∫≠t giao di·ªán
        self.revenue_amount.setText(f"{total_revenue:,.0f} VNƒê")
        self.profit_amount.setText(f"{total_profit:,.0f} VNƒê")
        self.orders_amount.setText(f"{total_orders} ƒê∆°n")

        print(f"üìä C·∫≠p nh·∫≠t bi·ªÉu ƒë·ªì: {filter_option}, Doanh thu: {total_revenue}, L·ª£i nhu·∫≠n: {total_profit}, ƒê∆°n h√†ng: {total_orders}")

        # **H√¥m nay ‚Üí Bi·ªÉu ƒë·ªì c·ªôt**
        if filter_option == "H√¥m nay":
            bar_series = QBarSeries()
            revenue_set = QBarSet("Doanh thu")
            profit_set = QBarSet("L·ª£i nhu·∫≠n")

            # Th√™m d·ªØ li·ªáu v√†o c·ªôt
            revenue_set.append(total_revenue)
            profit_set.append(total_profit)

            bar_series.append(revenue_set)
            bar_series.append(profit_set)

            self.chart.addSeries(bar_series)
            self.chart.setTitle("Bi·ªÉu ƒë·ªì doanh thu h√¥m nay")

            # **Th√™m tr·ª•c X (Danh m·ª•c)**
            axis_x = QValueAxis()
            axis_x.setLabelFormat("%d")
            axis_x.setTitleText("H√¥m nay")
            self.chart.addAxis(axis_x, Qt.AlignBottom)
            bar_series.attachAxis(axis_x)

            # **Th√™m tr·ª•c Y (Gi√° tr·ªã) v√† ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá**
            axis_y = QValueAxis()
            axis_y.setLabelFormat("%.0f VNƒê")
            axis_y.setTitleText("Gi√° tr·ªã")
            axis_y.setRange(0, max(total_revenue, total_profit) * 1.2)  # ƒêi·ªÅu ch·ªânh t·ªâ l·ªá
            self.chart.addAxis(axis_y, Qt.AlignLeft)
            bar_series.attachAxis(axis_y)

        # **Tu·∫ßn n√†y, Th√°ng n√†y & NƒÉm nay ‚Üí Bi·ªÉu ƒë·ªì ƒë∆∞·ªùng**
        else:
            revenue_series = QLineSeries()
            revenue_series.setName("Doanh thu")
            profit_series = QLineSeries()
            profit_series.setName("L·ª£i nhu·∫≠n")

            timestamps = set()

            # **Th√™m d·ªØ li·ªáu doanh thu**
            for row in data["revenue"]:
                date_obj = row[0]
                if isinstance(date_obj, str):
                    date_obj = datetime.datetime.strptime(date_obj, "%Y-%m-%d").date()
                timestamp = int(time.mktime(date_obj.timetuple())) * 1000
                revenue_series.append(timestamp, float(row[1]))
                timestamps.add(timestamp)

            # **Th√™m d·ªØ li·ªáu l·ª£i nhu·∫≠n**
            for row in data["profit"]:
                date_obj = row[0]
                if isinstance(date_obj, str):
                    date_obj = datetime.datetime.strptime(date_obj, "%Y-%m-%d").date()
                timestamp = int(time.mktime(date_obj.timetuple())) * 1000
                profit_series.append(timestamp, float(row[1]))
                timestamps.add(timestamp)

            # **Tr√°nh l·ªói n·∫øu ch·ªâ c√≥ m·ªôt ƒëi·ªÉm d·ªØ li·ªáu**
            if len(timestamps) == 1:
                timestamps.add(list(timestamps)[0] + 86400000)
                revenue_series.append(list(timestamps)[1], float(data["revenue"][0][1]))
                profit_series.append(list(timestamps)[1], float(data["profit"][0][1]))

            # **Th√™m t·∫•t c·∫£ series v√†o bi·ªÉu ƒë·ªì**
            self.chart.addSeries(revenue_series)
            self.chart.addSeries(profit_series)
            self.chart.setTitle(f"Bi·ªÉu ƒë·ªì doanh thu ({filter_option})")

            # **Th√™m tr·ª•c X (Ng√†y)**
            axis_x = QDateTimeAxis()
            axis_x.setFormat("dd-MM")
            axis_x.setTitleText("Ng√†y")
            self.chart.addAxis(axis_x, Qt.AlignBottom)
            revenue_series.attachAxis(axis_x)
            profit_series.attachAxis(axis_x)

            # **Th√™m tr·ª•c Y (Gi√° tr·ªã) v√† ƒëi·ªÅu ch·ªânh t·ª∑ l·ªá**
            max_y_value = max(
                max((float(row[1]) for row in data["revenue"] if row[1]), default=0),
                max((float(row[1]) for row in data["profit"] if row[1]), default=0)
            ) * 1.2
            axis_y = QValueAxis()
            axis_y.setLabelFormat("%.0f VNƒê")
            axis_y.setTitleText("Gi√° tr·ªã")
            axis_y.setRange(0, max_y_value)
            self.chart.addAxis(axis_y, Qt.AlignLeft)
            revenue_series.attachAxis(axis_y)
            profit_series.attachAxis(axis_y)

        # **C·∫≠p nh·∫≠t giao di·ªán bi·ªÉu ƒë·ªì**
        self.chart_view.update()












    